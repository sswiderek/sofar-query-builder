// In server.js

// ... (previous imports and setup remain the same)

// Define the system prompt as a constant
const SYSTEM_PROMPT = `Generate Sofar API queries in this exact JSON format for the latest-data endpoint. 
Required parameters: 'spotterId': string, 'token': string. 
Optional parameters: 'limit': number (default 20), 'includeWaves': boolean, 
'includeTrack': boolean, 'includeWindData': boolean, 'includeSurfaceTempData': boolean, 
'includeSolarData': boolean, 'includeBarometerData': boolean, 'includeModality': boolean, 
'includeSst': boolean, 'includeDriftMetrics': boolean, 'includeFrequencyData': boolean, 
'includeDirectionalMoments': boolean, 'realTimeOnly': boolean.`;

// API Endpoint: Generate AI Query
app.post("/api/generate-query", async (req, res) => {
  try {
    const userPrompt = req.body.prompt;
    if (!userPrompt) {
      return res.status(400).json({ error: "Missing prompt in request body" });
    }

    console.log("üîç Processing AI query for:", userPrompt);

    const aiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: SYSTEM_PROMPT
          },
          {
            role: "user",
            content: `Convert this request into a Sofar API query parameters object: "${userPrompt}"`
          }
        ],
        temperature: 0.3, // Lower temperature for more consistent outputs
        max_tokens: 150   // Increased token limit for complete responses
      }),
    });

    if (!aiResponse.ok) {
      const errorData = await aiResponse.json();
      throw new Error(`OpenAI API Error: ${JSON.stringify(errorData)}`);
    }

    const aiData = await aiResponse.json();
    
    // Extract and validate the response
    const generatedText = aiData.choices[0]?.message?.content;
    if (!generatedText) {
      throw new Error("No response generated by AI");
    }

    // Try to parse the response as JSON
    let parameters;
    try {
      parameters = JSON.parse(generatedText);
    } catch (e) {
      throw new Error("AI response was not valid JSON");
    }

    // Add required parameters
    parameters.spotterId = "SPOT-30344R";  // Add your Spotter ID
    parameters.token = process.env.SOFAR_API_KEY;

    console.log("üß† AI Generated Parameters:", parameters);
    
    res.json({ parameters });
  } catch (error) {
    console.error("‚ùå Error in /api/generate-query:", error);
    res.status(500).json({ 
      error: "Failed to process AI query",
      details: error.message
    });
  }
});

// ... (rest of the server code remains the same)
